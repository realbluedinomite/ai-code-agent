# Production Docker Compose Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  postgres:
    restart: always
    environment:
      POSTGRES_DB: ai_code_agent
      POSTGRES_USER: ai_agent_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./docker/postgres/init-prod:/docker-entrypoint-initdb.d:ro
    secrets:
      - postgres_password
    networks:
      - ai_network_prod
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  redis:
    restart: always
    volumes:
      - redis_prod_data:/data
      - ./docker/redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ai_network_prod
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Production application service (if needed)
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: always
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_NAME: ai_code_agent
      DB_USER: ai_agent_user
      REDIS_HOST: redis
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai_network_prod
    secrets:
      - postgres_password
      - jwt_secret
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

# Production network
networks:
  ai_network_prod:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.driver.mtu: "1500"
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Production volumes
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ai-code-agent/postgres
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/ai-code-agent/redis

# Production secrets (use Docker secrets or external secret management)
secrets:
  postgres_password:
    external: true
    name: ai_agent_postgres_password
  jwt_secret:
    external: true
    name: ai_agent_jwt_secret